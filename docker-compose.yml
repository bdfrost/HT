---
version: '2'
services:
  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    volumes:
      - /mnt/storage/appdata/heimdall/config:/config
    ports:
      - 80:80
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
  sabnzbd:
    image: linuxserver/sabnzbd
    container_name: sabnzbd
    volumes:
      - /mnt/storage/appdata/sabnzbd/config:/config
      - /mnt/storage/media/downloads:/downloads
      - /mnt/storage/media/incomplete-downloads:/incomplete-downloads
    ports:
      - 8080:8080
      - 9090:9090
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=America/Chicago
  nzbhydra:
    image: linuxserver/hydra
    container_name: hydra
    volumes:
      - /mnt/storage/appdata/hydra/config:/config
      - /mnt/storage/media/hydra-downloads:/downloads
    ports:
      - 5075:5075
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
  plex:
    image: linuxserver/plex
    container_name: plex
    volumes:
      - /mnt/storage/media/download-reprocess:/download-reprocess
      - /mnt/storage/appdata/plex:/config
      - /mnt/storage-usb/media/tv:/data/tvshows
      - /mnt/storage/media/homemovies:/data/homemovies
      - /mnt/storage/media/photos:/data/photos
      - /mnt/storage/media/exercisevideos:/data/exercisevideos
      - /mnt/storage/media/movies:/data/movies
      - /mnt/storage/media/TEMP_POSTPROCESSING:/transcode
    network_mode: host
    restart: always
    environment:
      - VERSION=public
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=America/Chicago
  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    depends_on:
      - plex
    volumes:
      - /mnt/storage/appdata/plexpy:/config
      - /mnt/storage/appdata/plex/Library/Application\ Support/Plex\ Media\ Server/Logs:/logs:ro
    ports:
      - 8181:8181
    links:
      - plex
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=America/Chicago
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    depends_on:
      - sabnzbd
    volumes:
      - /mnt/storage/appdata/sonarr:/config
      - /mnt/storage-usb/media/tv:/tv
      - /mnt/storage/media/downloads:/downloads
      - /mnt/storage/media/tv_import:/tv_import
      - /mnt/storage/media/download-reprocess:/download-reprocess
    ports:
      - 8989:8989
    links:
      - sabnzbd
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    volumes:
      - /mnt/storage/media/download-reprocess:/download-reprocess
      - /mnt/storage/appdata/radarr:/config
      - /mnt/storage/media/movies:/movies
      - /mnt/storage/media/downloads:/downloads
    ports:
      - 7878:7878
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    restart:
      always
#  letsencrypt:
#    image: linuxserver/letsencrypt
#    container_name: letsencrypt
#    ports:
#      - 443:443
#    volumes:
#      - /mnt/storage/appdata/letsencrypt:/config
#    restart:
#      always
#    environment:
#      - VALIDATION=dns
#      - PUID=${PUID}
#      - PGID=${PGID}
#      - EMAIL=
#      - URL=
#      - SUBDOMAINS=wildcard
#      - ONLY_SUBDOMAINS=false
#      - DNSPLUGIN=tls-sni
#      - DHLEVEL=4096
#      - TZ=America/Chicago
  portainer:
    image: portainer/portainer
    container_name: portainer
    ports:
      - 9000:9000
    volumes:
      - /mnt/storage/appdata/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart:
      always
  ouroboros:
    container_name: ouroboros
#    hostname: 
    image: pyouroboros/ouroboros
    environment:
      - CLEANUP=true
      - INTERVAL=300
      - LOG_LEVEL=info
      - SELF_UPDATE=true
      - IGNORE=mongo influxdb postgres mariadb
      - TZ=America/Chicago
    restart: unless-stopped
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  ubooquity:
    image: linuxserver/ubooquity
    container_name: ubooquity
    ports:
      - 2202:2202
      - 2203:2203
    volumes:
      - /mnt/storage/appdata/ubooquity:/config
      - /mnt/storage/media/downloads/:/files
      - /mnt/storage/media/books:/books
      - /mnt/storage/media/comics:/comics
    restart:
      always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
  trilium:
    image: zadam/trilium
    container_name: trilium
    ports:
      - 7777:8080 
    volumes:
      - /mnt/storage/appdata/trilium-data:/root/trilium-data
    restart:
      always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
  netdata:
    container_name: netdata
    image: netdata/netdata
    ports:
      - 19999:19999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
  htpcmanager:
    container_name: htpcmanager
    image: linuxserver/htpcmanager
    ports:
      - 8085:8085
    environment:
      - TZ=America/Chicago
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /mnt/storage/appdata/htpmanager:/config
  mylar:
    container_name: mylar
    ports:
      - 8090:8090
    environment:
      - TZ=America/Chicago
      - PUID=${PUID}
      - PGID=${PGID}
    image: linuxserver/mylar
    volumes:
      - /mnt/storage/appdata/mylar:/config
      - /mnt/storage/media/downloads/:/downloads
      - /mnt/storage/media/comics:/comics
      - /mnt/storage/media/comics-import:/comics-import
  traefik:
    hostname: traefik
    image: traefik:latest
    container_name: traefik
    restart: always
    domainname: ${DOMAINNAME}
    networks:
      - default
      - traefik_proxy
    ports:
#      - "80:80"
      - "443:443"
#      - "XXXX:8080"
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=traefik"
      - "traefik.frontend.rule=Host:traefik.${DOMAINNAME}"  
#      - "traefik.frontend.rule=Host:${DOMAINNAME}; PathPrefixStrip: /traefik"
      - "traefik.port=8080"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.SSLHost=example.com"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"
      - "traefik.frontend.auth.basic.users=${HTTP_USERNAME}:${HTTP_PASSWORD}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${USERDIR}/docker/traefik:/etc/traefik
      - ${USERDIR}/docker/shared:/shared
networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge